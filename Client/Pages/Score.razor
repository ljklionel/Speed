@page "/score"
@page "/score/{user}"
@inject IScoreService ScoreService

<AuthorizeView Roles="Admin">
    <Authorized>
        @if (User == null)
        {
            <h1>User not found</h1>
        }
        else 
        {
            <h1>Score of user @decoded</h1>
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Accuracy</th>
                        <th>WPM</th>
                        <th>Error</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var score in ScoreService.Scores)
                    {
                            <tr>
                                @{
                                    DateTime dt = new DateTime(score.Date);
                                        <td>@dt.ToString()</td>
                                }
                            <td>@score.Accuracy</td>
                            <td>@score.WPM</td>
                            <td>@score.Error</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        <h1>You are not authorised to see this.</h1>
    </NotAuthorized>

</AuthorizeView>


@code {
    [Parameter]
    public string? User { get; set; }

    private string? decoded;

    protected override async Task OnParametersSetAsync()
    {
        var base64EncodedBytes = System.Convert.FromBase64String(User);
        decoded = System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
        if(User != null) 
        {
            await ScoreService.GetSingleUserScore(decoded);
        }
    }
}
